// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  examAttempts ExamAttempt[]
  createdExams Exam[]
  certificates Certificate[]

  @@map("users")
}

model Subject {
  id          String @id @default(cuid())
  name        String
  description String?
  code        String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions Question[]
  exams     Exam[]

  @@map("subjects")
}

model Question {
  id             String         @id @default(cuid())
  question       String
  options        Json           // Array of options for MCQ
  correctAnswer  String
  explanation    String?
  difficulty     Difficulty     @default(MEDIUM)
  type           QuestionType   @default(MCQ)
  points         Int            @default(1)
  timeLimit      Int?           // Time limit in seconds
  subjectId      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  subject        Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  examQuestions  ExamQuestion[]

  @@map("questions")
}

model Exam {
  id              String        @id @default(cuid())
  title           String
  description     String?
  instructions    String?
  duration        Int           // Duration in minutes
  totalQuestions  Int
  totalMarks      Int
  passingMarks    Int
  startTime       DateTime?
  endTime         DateTime?
  isActive        Boolean       @default(true)
  randomizeOrder  Boolean       @default(true)
  showResults     Boolean       @default(true)
  allowReview     Boolean       @default(true)
  subjectId       String
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdBy       User          @relation(fields: [createdById], references: [id])
  examQuestions   ExamQuestion[]
  examAttempts    ExamAttempt[]

  @@map("exams")
}

model ExamQuestion {
  id         String @id @default(cuid())
  examId     String
  questionId String
  order      Int
  points     Int    @default(1)

  // Relations
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([examId, questionId])
  @@map("exam_questions")
}

model ExamAttempt {
  id            String              @id @default(cuid())
  examId        String
  userId        String
  startedAt     DateTime            @default(now())
  submittedAt   DateTime?
  status        AttemptStatus       @default(IN_PROGRESS)
  score         Float?
  percentage    Float?
  timeTaken     Int?                // Time taken in seconds
  responses     Json                // Student responses
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  exam          Exam                @relation(fields: [examId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate   Certificate?

  @@unique([examId, userId]) // One attempt per user per exam
  @@map("exam_attempts")
}

model Certificate {
  id              String      @id @default(cuid())
  examAttemptId   String      @unique
  userId          String
  certificateUrl  String?     // URL to generated certificate image
  verificationId  String      @unique @default(cuid())
  issuedAt        DateTime    @default(now())
  expiresAt       DateTime?
  
  // Relations
  examAttempt     ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  FILL_BLANK
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  EVALUATED
  EXPIRED
}
